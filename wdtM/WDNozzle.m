classdef WDNozzle < WDObject
    % WDNozzle   class of generic nozzle objects
    %
    % Define the class of generic nozzle objects. Different types of
    % nozzles can be generated by inheritance.
    %
    %
    % Properties
    % ----------
    % d_N__m            inner aperture diameter
    % dz_N__m           distance to workpiece surface
    % e_N__m            outer aperture diameter
    % mu_N              outflow coefficient
    % mu_j              jet pressure coupling efficiency
    %
    %
    % Methods (public)
    % ----------------
    % WDNozzle          construct generic nozzle
    % getDiameter       return nozzle diameter
    % getDistance       return working distance of nozzle tip
    % setDiameter       assign nozzle diameter
    %
    %
    % ToDos
    % - reimplement commented code
    % - ...
    %
    % Authors
    % Stefan Wittwer, info@wittwer-datatools.ch
    
    properties (Access = private)
        d_N__m          % inner aperture diameter
        dz_N__m         % distance to workpiece surface
%         e_N__m          % outer aperture diameter [m]
%         mu_N            % outflow coefficient
%         mu_j            % pressure coupling efficiency
    end%properties
    
    methods
    %% constructor %%
        function wd_nozzle = WDNozzle(name, uid)
            % WDNozzle    construct generic nozzle
            wd_nozzle = wd_nozzle@WDObject(name, uid);
        end%function
                
    %% get methods %%
        function d_N__m = getDiameter(nozzle)
            % getDiameter   return nozzle diameter
            d_N__m = nozzle.d_N__m;
        end%function
        function dz_N__m = getDistance(nozzle)
            % getDistance   return working distance of nozzle tip
            dz_N__m = nozzle.dz_N__m;
        end%function
        
    %% set methods %
        function setDiameter(nozzle, d_N__m)
            % setDiameter   assign nozzle diameter
            nozzle.d_N__m = d_N__m;
        end%function
    
        
        
%       %compute pressure coupling efficiency into kerf given by
%       %                             1
%       %  mu_j = ---------------------------------------------
%       %                         2 * pi * d_N * dz_N
%       %          1 + mu_N * ------------------------------
%       %                         2 * W_t * d_N + pi * W_t^2
%       %rev.20171004/swi
%       function mu_j = computeCouplingEfficiency(nozzle, W_t__m)
%         %compute (twice the) radial cross section
%         s_1__m2 = 2.0 * pi * nozzle.d_N__m .* nozzle.dz_N__m;
%         %compute (half the) inlet cross section
%         s_2__m2 = 2.0 * W_t__m .* nozzle.d_N__m + pi * W_t__m .^ 2.0;
%         %compute coupling efficiency
%         mu_j = 1.0 ./ (1.0 + nozzle.mu_N .* s_1__m2 ./ s_2__m2);
%         %store result
%         nozzle.mu_j = mu_j;
%       end
    
%     %compute nozzle diameter
%     %rev.20170510/swi
%     function d_N__m = computeDiameter(nozzle, W_t__m)
%       %define exponent of gas velocity and available nozzle diameters
%       n = 4.0;
%       d_N_available = [10, 12, 15, 17, 20, 25, 30, 35, 40, 45, 50, 60];
%       %define solution variable
%       d_N__m = zeros(size(W_t__m));
%       %loop over computation
%       for m = 1 : length(d_N__m)
%         %define transcendent parametrized function
%         f = @(x) (n + 2) * x ^ 2.0 ...
%           - 2 ^ (n + 1) * x ^ (n + 2) - 0.25 * n * nozzle.mu_j(m);
%         %compute nozzle diameter
%         d_N__m(m) = W_t__m(m) / abs(fzero(f, 1.0e-2));
%         %set to nearest available
%         d_N__m(m) = ...
%           1.0e-4 * min(d_N_available(1.0e4 * d_N__m(m) < d_N_available));
%       end
%       %store result
%       nozzle.d_N__m = d_N__m;
%     end
    
%     %compute nozzle distance to workpiece surface
%     %rev.20170510/swi
%     function dz_N__m = computeDistance(nozzle, W_t__m)
%       dz_N__m = ...
%         (1.0 ./ nozzle.mu_j - 1.0) ...
%         ./ nozzle.mu_N ...
%         .* (2.0 * W_t__m ...
%           .* nozzle.d_N__m ...
%           + pi * W_t__m .^ 2.0) ...
%         ./ (2.0 * pi * nozzle.d_N__m);
%       nozzle.dz_N__m = dz_N__m;
%     end
    
%     %get point data from nozzle object (PCC solver output)
%     %rev.20171004/swi
%     function pd_nozzle = getPointDataPCC(nozzle)
%       pd_nozzle = [ ...
%         (0 : length(nozzle.d_N__m) - 1)', ...
%         nozzle.mu_j];
%     end
    
%     %get point data from nozzle object (PDC solver output)
%     %rev.20171010/swi
%     function pdc_nozzle = getPointDataPDC(nozzle)
%       pdc_nozzle = [ ...
%         (0 : length(nozzle.mu_N) - 1)', ...
%         1.0e3 * nozzle.d_N__m, ...
%         1.0e3 * nozzle.dz_N__m];
%     end
    
%     %set point data of nozzle object (PCC solver input)
%     %rev.20171004/swi
%     function setPointDataPCC(nozzle, pd_nozzle)
%       nozzle.d_N__m = 1.0e-3 * pd_nozzle(:, 2);
%       nozzle.dz_N__m = 1.0e-3 * pd_nozzle(:, 3);
%       nozzle.e_N__m = 1.0e-3 * pd_nozzle(:, 4);
%       nozzle.mu_N = pd_nozzle(:, 5);
%     end
    
%     %set point data of nozzle object (PDC solver input)
%     %rev.20171010/swi
%     function setPointDataPDC(nozzle, pc_nozzle)
%       nozzle.mu_N = pc_nozzle(:, 2);
%       nozzle.mu_j = pc_nozzle(:, 3);
%     end
    
%     % write part data from nozzle object
%     % rev. 20170719/swi
%     function part_data = writePartData(nozzle)
%       part_data = [ ...
%         (0 : length(nozzle.d_N__m) - 1)', ...
%         1.0e3 * nozzle.d_N__m', ...
%         1.0e3 * nozzle.dz_N__m'];
%     end
    
%     % write process characteristic
%     % rev.20170531/swi
%     function process_characteristic = ...
%         writeProcessCharacteristic(nozzle, process_characteristic, id)
%       % create matrix of zeros for process characteristic of workpiece
%       pcc_nozzle = zeros(length(id), 2);
%       % insert index colum
%       pcc_nozzle(:, 1) = id;
%       % insert process characteristics
%       pcc_nozzle(:, 2) = nozzle.mu_j;
%       % return results
%       process_characteristic{4} = pcc_nozzle;
%     end
    end%methods
end%classdef


% end of Nozzle.m
